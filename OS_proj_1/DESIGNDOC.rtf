{\rtf1\ansi\ansicpg936\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red152\green210\blue245;\red255\green255\blue255;
\red28\green194\blue247;\red153\green212\blue245;\red200\green137\blue252;\red111\green213\blue190;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c65490\c85882\c96863;\cssrgb\c100000\c100000\c99985\c0;
\cssrgb\c5199\c80248\c97648;\cssrgb\c65826\c86268\c97084;\cssrgb\c82801\c62827\c99142;\cssrgb\c49836\c85961\c79153;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12860\viewh7280\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 \expnd0\expndtw0\kerning0
            +--------------------+\
            |        CS 140      |\
            | PROJECT 1: THREADS |\
            |   DESIGN DOCUMENT  |\
            +--------------------+\
\
---- GROUP ----\
\
>> Fill in the names and email addresses of your group members.\
\
Yining She <sheyn@shanghaitech.edu.cn>\
Shaoting Peng <pengsht@shanghaitech.edu.cn>\
\
---- PRELIMINARIES ----\
\
>> If you have any preliminary comments on your submission, notes for the\
>> TAs, or extra credit, please give them here.\
\
>> Please cite any offline or online sources you consulted while\
>> preparing your submission, other than the Pintos documentation, course\
>> text, lecture notes, and course staff.\
\
Online source: https://www.cnblogs.com/laiy/p/pintos_project1_thread.html\
\
                 ALARM CLOCK\
                 ===========\
\
---- DATA STRUCTURES ----\
\
>> A1: Copy here the declaration of each new or changed `struct' or\
>> `struct' member, global or static variable, `typedef', or\
>> enumeration.  Identify the purpose of each in 25 words or less.\
\
In `thread.h\'92, struct `thread\'92:\
\
struct thread \{\
	// ....\
\
	int64_t sleep_ticks;\
	// record one thread\'92s time ticks that it should sleep to\
\}\
\
---- ALGORITHMS ----\
\
>> A2: Briefly describe what happens in a call to timer_sleep(),\
>> including the effects of the timer interrupt handler.\
\
First, use `start\'92 to record the number of timer ticks since then OS boosted, and the `old_level\'92 sentences are used to ensure the current code between can\'92t be interrupted.\
\
Originally, the `while\'92 sentence keeps yielding the current thread to realize sleeping, changing the thread between the `ready_list\'92 and `running_list\'92, which wastes lots of CPU resources.\
\
To avoid busy waiting, we record the total time the current thread is going to sleep and call `thread_block()\'92, which sets the current thread to `blocked\'92 and re-schedules the next thread to run.\
\
In `timer_interrupt()\'92, we check for each thread\'92s sleeping times, and unblock the thread if it has reached its `sleep_ticks\'92 (i.e. `wake it up!\'92).
\f1\fs24 \cf3 \outl0\strokewidth0 \strokec3 \

\f0\fs26 \cf0 \outl0\strokewidth0 \
\
>> A3: What steps are taken to minimize the amount of time spent in\
>> the timer interrupt handler?\
\
---- SYNCHRONIZATION ----\
\
>> A4: How are race conditions avoided when multiple threads call\
>> timer_sleep() simultaneously?\
\
When timer_sleep() disabled interrupt, other threads which are calling this function will be stored in a list.\
\
>> A5: How are race conditions avoided when a timer interrupt occurs\
>> during a call to timer_sleep()?\
\
The following lines of code in `timer_sleep()\'92 show an atomic operation which can\'92t be interrupted:\
\
	enum intr_level old_level;\
\pard\pardeftab720\partightenfactor0
\cf0 	old_level = intr_disable ();   \
	......\
	intr_set_level (old_level);\
\
As explained above.\
\
---- RATIONALE ----\
\
>> A6: Why did you choose this design?  In what ways is it superior to\
>> another design you considered?\
\
\
\
             PRIORITY SCHEDULING\
             ===================\
\
---- DATA STRUCTURES ----\
\
>> B1: Copy here the declaration of each new or changed `struct' or\
>> `struct' member, global or static variable, `typedef', or\
>> enumeration.  Identify the purpose of each in 25 words or less.\
\
In `thread.h\'92, struct `thread\'92:\
\
struct thread \{\
	// ....\
\pard\pardeftab720\partightenfactor0
\cf0 \
	
\f2\i\fs24 \cf2 \cb4 \outl0\strokewidth0 \strokec5 struct
\f1\i0 \cb4 \strokec6  \cb4 \strokec7 list\cb4 \strokec6  
\f2\i \cb4 \strokec8 locks_have
\f1\i0 \cb4 \strokec6 ;\
	// To record a list of locks the thread owns\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4 \strokec6    	
\f2\i \cb4 \strokec5 struct
\f1\i0 \cb4 \strokec6  \cb4 \strokec7 lock\cb4 \strokec6  
\f2\i \cb4 \strokec5 *\cb4 \strokec8 lock_waiting
\f1\i0 \cb4 \strokec6 ;\
	// To record the lock that the thread is waiting for (if any)\
\
   	
\f2\i \cb4 \strokec5 int
\f1\i0 \cb4 \strokec6  
\f2\i \cb4 \strokec8 origin_priority
\f1\i0 \cb4 \strokec6 ;\
	// The priority before donation\
\}\
\
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 \cb1 \outl0\strokewidth0 In `synch.h\'92, struct `lock\'92:\
\
struct lock \{\
	// ....\
\
	int priority;\
	// the max priority among the current holder \
	// and the threads acquiring this lock\
\
	struct list_elem elem;\
	// used to maintain a priority queue\
\}\
\
In `synch.h\'92, struct `semaphore\'92:\
\
struct semaphore \{\
	// ....\
	\
	struct lock *owner;\
	// record who owns the semaphore\
\}
\f1\fs24 \cf2 \cb4 \outl0\strokewidth0 \strokec6 \
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 \cb1 \outl0\strokewidth0 \
>> B2: Explain the data structure used to track priority donation.\
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a\
>> .png file.)\
\
\
\
---- ALGORITHMS ----\
\
>> B3: How do you ensure that the highest priority thread waiting for\
>> a lock, semaphore, or condition variable wakes up first?\
\
In `thread.c\'92 and `thread.h\'92, we reimplement the `list_push_back()\'92 into `list_inserted_ordered()\'92 using ` comparator_thread_priority()\'92 to maintain a priority queue, thus we can get the thread owning the highest priority from `list_begin()\'92.\
\
>> B4: Describe the sequence of events when a call to lock_acquire()\
>> causes a priority donation.  How is nested donation handled?\
\
Sequence of events:\
\
0. Check for `thread_mlfqs\'92 first! If it\'92s true, we can\'92t do priority donation! (It troubled us for a long time in mission3 to find a problem in mission2)\
\
1. If a priority donation is caused, it means the current thread has a higher priority than the lock holder. We write a recursive function `donate_priority()\'92 to handler the problem. \
\
2. As for the current lock, we update the priorities of threads which are trying to acquire this lock (i.e. in the test `priority-donate-one\'92), as well as other locks acquired by those threads (if any) (i.e. in the test `priority-donate-multiple\'92). And then update the priority related to those locks by calling this function again until there\'92s no new holders any more.\
\
3. After changing the priority, life has to go on. Semaphore is used to realize a lock, so we get into `sema_down()\'92.\
\
4. In `sema_down()\'92, we first disable the interrupt, then check for the sema\'92s value.\
\
5. Because the lock is currently being held by some other thread, the value should be zero and then the current thread is inserted into `waiters\'92 according to its priority, then set the status to `BLOCKED\'92 and waiting for the lock to be released.\
\
Nested donation is handled in step2 by the recursive function `donate_priority()\'92.\
\
>> B5: Describe the sequence of events when lock_release() is called\
>> on a lock that a higher-priority thread is waiting for.\
\
Sequence of events:\
\
0. Check for `thread_mlfqs\'92 first as above...\
\
1. Update the lock holder to NULL, and call `restore_priority()\'92 to get back to the priority before donation.\
\
2. Because in `locks_have\'92, we store the locks according to their priorities DESC, the first element in the list should be the max priority, then update the thread\'92s priority to it.\
\
3. `sema_down()\'92 is actually how a lock is released:, unblock the first thread (with the highest priority) in the `waiters\'92, and increase the sema\'92s value by one.\
\
4. The current thread should yield the CPU!\
\
---- SYNCHRONIZATION ----\
\
>> B6: Describe a potential race in thread_set_priority() and explain\
>> how your implementation avoids it.  Can you use a lock to avoid\
>> this race?\
\
---- RATIONALE ----\
\
>> B7: Why did you choose this design?  In what ways is it superior to\
>> another design you considered?\
\
We decompose the whole process into three parts: \'93before `sema_down()\'92\'94, \'93after `sema_down()\'92\'94, and \'93lock_release()\'94; and we have three variables need to be considered: \'93current thread\'94, \'93lock holder\'94 and \'93lock\'94, each with their own struct members. And we draw a graph:\
\
\
              ADVANCED SCHEDULER\
              ==================\
\
---- DATA STRUCTURES ----\
\
>> C1: Copy here the declaration of each new or changed `struct' or\
>> `struct' member, global or static variable, `typedef', or\
>> enumeration.  Identify the purpose of each in 25 words or less.\
\
\pard\pardeftab720\partightenfactor0
\cf0 In `thread.h\'92, struct `thread\'92:\
\
struct thread \{\
	// ....\
\
	int nice;\
\pard\pardeftab720\partightenfactor0
\cf0 	// record nice value\
\
	int64_t recent_cpu;\
	// record recent cpu (signed long)\
\}\
\
\
---- ALGORITHMS ----\
\
>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each\
>> has a recent_cpu value of 0.  Fill in the table below showing the\
>> scheduling decision and the priority and recent_cpu values for each\
>> thread after each given number of timer ticks:\
\
timer  recent_cpu    priority   thread\
ticks   A   B   C   A   B   C   to run\
-----  --  --  --  --  --  --   ------\
 0\
 4\
 8\
12\
16\
20\
24\
28\
32\
36\
\
>> C3: Did any ambiguities in the scheduler specification make values\
>> in the table uncertain?  If so, what rule did you use to resolve\
>> them?  Does this match the behavior of your scheduler?\
\
>> C4: How is the way you divided the cost of scheduling between code\
>> inside and outside interrupt context likely to affect performance?\
\
---- RATIONALE ----\
\
>> C5: Briefly critique your design, pointing out advantages and\
>> disadvantages in your design choices.  If you were to have extra\
>> time to work on this part of the project, how might you choose to\
>> refine or improve your design?\
\
>> C6: The assignment explains arithmetic for fixed-point math in\
>> detail, but it leaves it open to you to implement it.  Why did you\
>> decide to implement it the way you did?  If you created an\
>> abstraction layer for fixed-point math, that is, an abstract data\
>> type and/or a set of functions or macros to manipulate fixed-point\
>> numbers, why did you do so?  If not, why not?\
\
               SURVEY QUESTIONS\
               ================\
\
Answering these questions is optional, but it will help us improve the\
course in future quarters.  Feel free to tell us anything you\
want--these questions are just to spur your thoughts.  You may also\
choose to respond anonymously in the course evaluations at the end of\
the quarter.\
\
>> In your opinion, was this assignment, or any one of the three problems\
>> in it, too easy or too hard?  Did it take too long or too little time?\
\
>> Did you find that working on a particular part of the assignment gave\
>> you greater insight into some aspect of OS design?\
\
>> Is there some particular fact or hint we should give students in\
>> future quarters to help them solve the problems?  Conversely, did you\
>> find any of our guidance to be misleading?\
\
>> Do you have any suggestions for the TAs to more effectively assist\
>> students, either for future quarters or the remaining projects?\
\
>> Any other comments?}